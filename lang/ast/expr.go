package ast

import "github.com/lohvht/went/lang/token"

//============================================================================
// This file is generated by tool/ast-generate.go
// This file describes the individual node types as well as their implementations
// All edits should be made to the nodeTemplate in ast-generate.go instead
//============================================================================

// Expr AST nodes
type (
	Expr interface {
		Node
		expr()
	}
	// NameExpr node
	NameExpr struct {
		Name token.Token
	}

	// GrpExpr node
	GrpExpr struct {
		LeftRound  token.Token
		Expression Expr
		RightRound token.Token
	}

	// BinExpr node
	BinExpr struct {
		Left  Expr
		Op    token.Token
		Right Expr
	}

	// UnExpr node
	UnExpr struct {
		Op      token.Token
		Operand Expr
	}

	// BasicLit node
	BasicLit struct {
		Text  string
		Typ   token.Type
		Token token.Token
		Value interface{}
	}
)

func (n *NameExpr) expr() {}
func (n *GrpExpr) expr()  {}
func (n *BinExpr) expr()  {}
func (n *UnExpr) expr()   {}
func (n *BasicLit) expr() {}

// Accept marshals the Visitor to the correct Visitor.visitXX method
func (n *NameExpr) Accept(v Visitor) interface{} { return v.VisitNameExpr(n) }

// Accept marshals the Visitor to the correct Visitor.visitXX method
func (n *GrpExpr) Accept(v Visitor) interface{} { return v.VisitGrpExpr(n) }

// Accept marshals the Visitor to the correct Visitor.visitXX method
func (n *BinExpr) Accept(v Visitor) interface{} { return v.VisitBinExpr(n) }

// Accept marshals the Visitor to the correct Visitor.visitXX method
func (n *UnExpr) Accept(v Visitor) interface{} { return v.VisitUnExpr(n) }

// Accept marshals the Visitor to the correct Visitor.visitXX method
func (n *BasicLit) Accept(v Visitor) interface{} { return v.VisitBasicLit(n) }
